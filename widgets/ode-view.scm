(define-module (widgets ode-view)
  #:use-module (libs physics)
  #:use-module (widgets base)
  #:use-module (widgets 3d-view)
  #:use-module (oop goops)
  #:use-module (extra 3d)
  #:use-module (extra math)
  #:use-module (extra common)
  #:use-module (extra ref)
  #:use-module (slayer)
  #:use-module (slayer 3d)
  #:export (<ode-view>))

(define-class <ode-view> (<extended-widget>)
  (camera #:init-thunk (lambda()(make <3d-cam>)))
  (simulation #:init-value #f #:init-keyword #:simulation))

(define-method (update! (ov <ode-view>))
  (camera #:init-thunk (\ make <3d-cam>))
  (simulation-step! #[ov 'simulation]))

(define box (generate-cube))

(define-method (draw (ov <ode-view>))
  (let ((original-viewport (current-viewport)))
    (set-viewport! #[ov 'x] #[ov 'y] #[ov 'w] #[ov 'h])
    (push-matrix!)
    (perspective-projection! #[ov : 'camera : 'fovy])
    (translate-view! #[ov : 'camera : 'position])
    (rotate-view! #[ov : 'camera : 'orientation])
    (for rig in (simulation-rigs #[ov 'simulation])
	 (for body in (rig-bodies rig)
	      (let ((position (body-property body 'position))
		    (rotation (body-property body 'quaternion)))
		;; i jeszcze shape jakos trzeba wydobitch
		(display position)(newline)
		(push-matrix!)
		(translate-view! position)
		(rotate-view! rotation)
		(draw-mesh box)
		(pop-matrix!))))
    (pop-matrix!)
    (apply set-viewport! original-viewport)))
